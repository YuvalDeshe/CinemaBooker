{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 16, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/CinemaBooker/cinema-booker/src/middleware.ts"],"sourcesContent":["// src/middleware.ts\r\nimport { getToken } from \"next-auth/jwt\";\r\nimport { NextResponse } from \"next/server\";\r\nimport type { NextRequest } from \"next/server\";\r\n\r\nexport async function middleware(req: NextRequest) {\r\n  const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });\r\n  const { pathname } = req.nextUrl;\r\n\r\n  const publicPaths = [\"/\", \"/login\", \"/register\", \"/verify-email\"];\r\n  const unauthenticatedPaths = [\"/login\", \"/register\"];\r\n  const verificationRequiredPaths = [\"/booking\"];\r\n\r\n  const isAuthenticated = !!token;\r\n  const isEmailVerified = token?.isEmailVerified ?? false;\r\n\r\n  console.log(\"isAuthenticated:\", isAuthenticated, \"| path:\", pathname);\r\n\r\n  // Allow framework/static assets and API routes\r\n  if (\r\n    pathname.startsWith(\"/_next\") ||            \r\n    pathname.startsWith(\"/api/auth\") ||         \r\n    pathname.startsWith(\"/api/verify-email\") ||\r\n    pathname.startsWith(\"/posters/\") ||         \r\n    pathname === \"/favicon.ico\" ||\r\n    pathname === \"/robots.txt\" ||\r\n    pathname === \"/sitemap.xml\" ||\r\n    /\\.(png|jpg|jpeg|gif|svg|webp|ico|txt|map)$/i.test(pathname)\r\n  ) {\r\n    return NextResponse.next();\r\n  }\r\n\r\n  const isPublic = publicPaths.some(p => pathname === p || pathname.startsWith(`${p}/`));\r\n\r\n  // Redirect authenticated users away from login/register pages\r\n  if (isAuthenticated && unauthenticatedPaths.includes(pathname)) {\r\n    console.log(`Authenticated user attempted to access login/register page: '${pathname}'`);\r\n    return NextResponse.redirect(new URL(\"/\", req.url));\r\n  }\r\n\r\n  // Check email verification for booking pages\r\n  if (isAuthenticated && !isEmailVerified && verificationRequiredPaths.some(path => pathname.startsWith(path))) {\r\n    console.log(`Unverified user attempted to access booking: '${pathname}'`);\r\n    return NextResponse.redirect(new URL(\"/?verification-required=true\", req.url));\r\n  }\r\n\r\n  return NextResponse.next();\r\n}\r\n\r\nexport const config = {\r\n  matcher: [\"/((?!_next|api|static|favicon.ico).*)\"],\r\n};"],"names":[],"mappings":"AAAA,oBAAoB;;;;;;;AACpB;AACA;AAAA;;;AAGO,eAAe,WAAW,GAAgB;IAC/C,MAAM,QAAQ,MAAM,IAAA,oMAAQ,EAAC;QAAE;QAAK,QAAQ,QAAQ,GAAG,CAAC,eAAe;IAAC;IACxE,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,OAAO;IAEhC,MAAM,cAAc;QAAC;QAAK;QAAU;QAAa;KAAgB;IACjE,MAAM,uBAAuB;QAAC;QAAU;KAAY;IACpD,MAAM,4BAA4B;QAAC;KAAW;IAE9C,MAAM,kBAAkB,CAAC,CAAC;IAC1B,MAAM,kBAAkB,OAAO,mBAAmB;IAElD,QAAQ,GAAG,CAAC,oBAAoB,iBAAiB,WAAW;IAE5D,+CAA+C;IAC/C,IACE,SAAS,UAAU,CAAC,aACpB,SAAS,UAAU,CAAC,gBACpB,SAAS,UAAU,CAAC,wBACpB,SAAS,UAAU,CAAC,gBACpB,aAAa,kBACb,aAAa,iBACb,aAAa,kBACb,8CAA8C,IAAI,CAAC,WACnD;QACA,OAAO,oOAAY,CAAC,IAAI;IAC1B;IAEA,MAAM,WAAW,YAAY,IAAI,CAAC,CAAA,IAAK,aAAa,KAAK,SAAS,UAAU,CAAC,GAAG,EAAE,CAAC,CAAC;IAEpF,8DAA8D;IAC9D,IAAI,mBAAmB,qBAAqB,QAAQ,CAAC,WAAW;QAC9D,QAAQ,GAAG,CAAC,CAAC,6DAA6D,EAAE,SAAS,CAAC,CAAC;QACvF,OAAO,oOAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,IAAI,GAAG;IACnD;IAEA,6CAA6C;IAC7C,IAAI,mBAAmB,CAAC,mBAAmB,0BAA0B,IAAI,CAAC,CAAA,OAAQ,SAAS,UAAU,CAAC,QAAQ;QAC5G,QAAQ,GAAG,CAAC,CAAC,8CAA8C,EAAE,SAAS,CAAC,CAAC;QACxE,OAAO,oOAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,gCAAgC,IAAI,GAAG;IAC9E;IAEA,OAAO,oOAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;KAAwC;AACpD"}}]
}