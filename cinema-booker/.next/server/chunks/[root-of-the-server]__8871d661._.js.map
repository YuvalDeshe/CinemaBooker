{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/johnd/OneDrive/Desktop/Folders/Web%20Dev%20Stuff/CinemaBooker/cinema-booker/src/app/api/verify-email/route.ts"],"sourcesContent":["import { MongoClient } from 'mongodb';\r\nimport { NextRequest } from 'next/server';\r\n\r\nconst uri = process.env.MONGODB_URI;\r\n\r\nlet client: MongoClient;\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nlet db: any;\r\n\r\nasync function connectToDatabase() {\r\n    if (db) {\r\n        return { db };\r\n    }\r\n\r\n    client = new MongoClient(uri!);\r\n    await client.connect();\r\n    db = client.db('UserDatabase');\r\n\r\n    return { db };\r\n}\r\n\r\nexport async function GET(request: NextRequest) {\r\n    try {\r\n        const { searchParams } = new URL(request.url);\r\n        const token = searchParams.get('token');\r\n\r\n        if (!token) {\r\n            return new Response(\r\n                JSON.stringify({ message: \"Verification token is required.\" }),\r\n                {\r\n                    status: 400,\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                }\r\n            );\r\n        }\r\n\r\n        const { db } = await connectToDatabase();\r\n        const usersCollection = db.collection('UserCollection');\r\n\r\n        // Find user with matching verification token that hasn't expired\r\n        const user = await usersCollection.findOne({\r\n            emailVerificationToken: token,\r\n            emailVerificationExpires: { $gt: new Date() }\r\n        });\r\n\r\n        if (!user) {\r\n            return new Response(\r\n                JSON.stringify({ \r\n                    message: \"Invalid or expired verification token. Please register again.\" \r\n                }),\r\n                {\r\n                    status: 400,\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                }\r\n            );\r\n        }\r\n\r\n        // Update user to be verified and remove verification token\r\n        await usersCollection.updateOne(\r\n            { _id: user._id },\r\n            {\r\n                $set: {\r\n                    isEmailVerified: true,\r\n                    userStatus: \"Active\" // Activate the user\r\n                },\r\n                $unset: {\r\n                    emailVerificationToken: \"\",\r\n                    emailVerificationExpires: \"\"\r\n                }\r\n            }\r\n        );\r\n\r\n        // Return success response with redirect information\r\n        return new Response(\r\n            JSON.stringify({ \r\n                message: \"Email verified successfully! Your account is now active.\",\r\n                verified: true,\r\n                redirectTo: \"/login\"\r\n            }),\r\n            {\r\n                status: 200,\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }\r\n        );\r\n\r\n    } catch (error) {\r\n        console.error(\"Error verifying email:\", error);\r\n        return new Response(\r\n            JSON.stringify({ \r\n                message: \"An error occurred during email verification.\", \r\n                error: error instanceof Error ? error.message : 'Unknown error'\r\n            }),\r\n            {\r\n                status: 500,\r\n                headers: { 'Content-Type': 'application/json' },\r\n            }\r\n        );\r\n    }\r\n}"],"names":[],"mappings":";;;;AAAA;;AAGA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AAEnC,IAAI;AACJ,8DAA8D;AAC9D,IAAI;AAEJ,eAAe;IACX,IAAI,IAAI;QACJ,OAAO;YAAE;QAAG;IAChB;IAEA,SAAS,IAAI,sHAAW,CAAC;IACzB,MAAM,OAAO,OAAO;IACpB,KAAK,OAAO,EAAE,CAAC;IAEf,OAAO;QAAE;IAAG;AAChB;AAEO,eAAe,IAAI,OAAoB;IAC1C,IAAI;QACA,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,QAAQ,aAAa,GAAG,CAAC;QAE/B,IAAI,CAAC,OAAO;YACR,OAAO,IAAI,SACP,KAAK,SAAS,CAAC;gBAAE,SAAS;YAAkC,IAC5D;gBACI,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAClD;QAER;QAEA,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QACrB,MAAM,kBAAkB,GAAG,UAAU,CAAC;QAEtC,iEAAiE;QACjE,MAAM,OAAO,MAAM,gBAAgB,OAAO,CAAC;YACvC,wBAAwB;YACxB,0BAA0B;gBAAE,KAAK,IAAI;YAAO;QAChD;QAEA,IAAI,CAAC,MAAM;YACP,OAAO,IAAI,SACP,KAAK,SAAS,CAAC;gBACX,SAAS;YACb,IACA;gBACI,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAClD;QAER;QAEA,2DAA2D;QAC3D,MAAM,gBAAgB,SAAS,CAC3B;YAAE,KAAK,KAAK,GAAG;QAAC,GAChB;YACI,MAAM;gBACF,iBAAiB;gBACjB,YAAY,SAAS,oBAAoB;YAC7C;YACA,QAAQ;gBACJ,wBAAwB;gBACxB,0BAA0B;YAC9B;QACJ;QAGJ,oDAAoD;QACpD,OAAO,IAAI,SACP,KAAK,SAAS,CAAC;YACX,SAAS;YACT,UAAU;YACV,YAAY;QAChB,IACA;YACI,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAClD;IAGR,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,IAAI,SACP,KAAK,SAAS,CAAC;YACX,SAAS;YACT,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QACpD,IACA;YACI,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAClD;IAER;AACJ","debugId":null}}]
}