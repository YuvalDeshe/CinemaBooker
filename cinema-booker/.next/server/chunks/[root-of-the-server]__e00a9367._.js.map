{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///Users/nizar/Desktop/software_eng/CinemaBooker/cinema-booker/src/app/api/movies/route.js"],"sourcesContent":["import { MongoClient } from 'mongodb';\n\nconst uri = \"mongodb+srv://parkertheoutlaw_db_user:FC6qKAalpje0bIUU@cluster0.levqaeh.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\";\n\nlet client;\nlet db;\n\nasync function connectToDatabase() {\n    if (db) {\n        return { db };\n    }\n\n    client = new MongoClient(uri);\n    await client.connect();\n    db = client.db('MoviesDatabase');\n\n    return { db };\n}\n\nexport async function GET() {\n    try {\n        const { db } = await connectToDatabase();\n        const moviesCollection = db.collection('MoviesCollection');\n\n        const movies = await moviesCollection.find({}).toArray();\n\n        const formattedMovies = movies.map(movie => ({\n            _id: movie._id,\n            title: movie.title,\n            genre: movie.genre,\n            posterUrl: movie.png,\n            director: movie.director,\n            cast: movie.Cast,\n            rating: movie.Rating,\n            runTime: movie.RunTime,\n            trailer: movie.trailer,\n            isCurrentlyRunning: movie.isCurrentlyRunning,\n        }));\n\n        return new Response(JSON.stringify(formattedMovies), {\n            status: 200,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n\n    } catch (error) {\n        console.error(\"Failed to fetch movies:\", error);\n        return new Response(JSON.stringify({ message: \"An error occurred.\", error: error.message }), {\n            status: 500,\n            headers: {\n                'Content-Type': 'application/json',\n            },\n        });\n    }\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,MAAM;AAEZ,IAAI;AACJ,IAAI;AAEJ,eAAe;IACX,IAAI,IAAI;QACJ,OAAO;YAAE;QAAG;IAChB;IAEA,SAAS,IAAI,sHAAW,CAAC;IACzB,MAAM,OAAO,OAAO;IACpB,KAAK,OAAO,EAAE,CAAC;IAEf,OAAO;QAAE;IAAG;AAChB;AAEO,eAAe;IAClB,IAAI;QACA,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QACrB,MAAM,mBAAmB,GAAG,UAAU,CAAC;QAEvC,MAAM,SAAS,MAAM,iBAAiB,IAAI,CAAC,CAAC,GAAG,OAAO;QAEtD,MAAM,kBAAkB,OAAO,GAAG,CAAC,CAAA,QAAS,CAAC;gBACzC,KAAK,MAAM,GAAG;gBACd,OAAO,MAAM,KAAK;gBAClB,OAAO,MAAM,KAAK;gBAClB,WAAW,MAAM,GAAG;gBACpB,UAAU,MAAM,QAAQ;gBACxB,MAAM,MAAM,IAAI;gBAChB,QAAQ,MAAM,MAAM;gBACpB,SAAS,MAAM,OAAO;gBACtB,SAAS,MAAM,OAAO;gBACtB,oBAAoB,MAAM,kBAAkB;YAChD,CAAC;QAED,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,kBAAkB;YACjD,QAAQ;YACR,SAAS;gBACL,gBAAgB;YACpB;QACJ;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAAsB,OAAO,MAAM,OAAO;QAAC,IAAI;YACzF,QAAQ;YACR,SAAS;gBACL,gBAAgB;YACpB;QACJ;IACJ;AACJ","debugId":null}}]
}