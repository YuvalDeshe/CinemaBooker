{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 49, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/johnd/OneDrive/Desktop/Folders/Web%20Dev%20Stuff/CinemaBooker/cinema-booker/src/app/api/movies/%5Bid%5D/route.js"],"sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\r\n\r\nconst uri = \"mongodb+srv://parkertheoutlaw_db_user:FC6qKAalpje0bIUU@cluster0.levqaeh.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\";\r\n\r\n// Declare a variable for the client outside the handler\r\nlet client;\r\nlet db;\r\n\r\n// Function to connect to the database (only runs once)\r\nasync function connectToDatabase() {\r\n    if (db) {\r\n        return { client, db }; // Connection is already established\r\n    }\r\n\r\n    // Connect to the database\r\n    client = new MongoClient(uri);\r\n    await client.connect();\r\n    db = client.db('MoviesDatabase');\r\n\r\n    return { client, db };\r\n}\r\n\r\nexport async function GET(request, { params }) {\r\n    try {\r\n        // Use the connection function instead of connecting on every call\r\n        const { db } = await connectToDatabase();\r\n        const moviesCollection = db.collection('MoviesCollection');\r\n\r\n        // You do not need await params here, just destructure params\r\n        const { id } = await params;\r\n\r\n        // This line (13) will now succeed because the client is open\r\n        const movie = await moviesCollection.findOne({ _id: new ObjectId(id) });\r\n\r\n        if (!movie) {\r\n            return new Response(JSON.stringify({ message: \"Movie not found\" }), {\r\n                status: 404,\r\n                headers: { 'Content-Type': 'application/json' },\r\n            });\r\n        }\r\n\r\n        // Normalize castList and other fields (rest of your logic remains the same)\r\n        let castList = [];\r\n        if (Array.isArray(movie.Cast)) {\r\n            castList = movie.Cast;\r\n        } else if (typeof movie.Cast === \"string\") {\r\n            castList = movie.Cast.split(\",\").map(actor => actor.trim());\r\n        }\r\n\r\n        const formattedMovie = {\r\n            _id: movie._id,\r\n            title: movie.title,\r\n            description: movie.description,\r\n            genre: movie.genre,\r\n            posterUrl: movie.png,\r\n            trailerLink: movie.trailer,\r\n            director: movie.director,\r\n            castList,\r\n            rating: movie.Rating,\r\n            runTime: movie.RunTime,\r\n            isCurrentlyRunning: movie.isCurrentlyRunning,\r\n            showTime: movie.showTime,\r\n        };\r\n\r\n        return new Response(JSON.stringify(formattedMovie), {\r\n            status: 200,\r\n            headers: { 'Content-Type': 'application/json' },\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error(\"Failed to fetch movie:\", error);\r\n        return new Response(JSON.stringify({ message: \"An error occurred.\", error: error.message }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' },\r\n        });\r\n    }\r\n    // REMOVED: The finally block with await client.close();\r\n}"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,MAAM;AAEZ,wDAAwD;AACxD,IAAI;AACJ,IAAI;AAEJ,uDAAuD;AACvD,eAAe;IACX,IAAI,IAAI;QACJ,OAAO;YAAE;YAAQ;QAAG,GAAG,oCAAoC;IAC/D;IAEA,0BAA0B;IAC1B,SAAS,IAAI,sHAAW,CAAC;IACzB,MAAM,OAAO,OAAO;IACpB,KAAK,OAAO,EAAE,CAAC;IAEf,OAAO;QAAE;QAAQ;IAAG;AACxB;AAEO,eAAe,IAAI,OAAO,EAAE,EAAE,MAAM,EAAE;IACzC,IAAI;QACA,kEAAkE;QAClE,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QACrB,MAAM,mBAAmB,GAAG,UAAU,CAAC;QAEvC,6DAA6D;QAC7D,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QAErB,6DAA6D;QAC7D,MAAM,QAAQ,MAAM,iBAAiB,OAAO,CAAC;YAAE,KAAK,IAAI,mHAAQ,CAAC;QAAI;QAErE,IAAI,CAAC,OAAO;YACR,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,SAAS;YAAkB,IAAI;gBAChE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAClD;QACJ;QAEA,4EAA4E;QAC5E,IAAI,WAAW,EAAE;QACjB,IAAI,MAAM,OAAO,CAAC,MAAM,IAAI,GAAG;YAC3B,WAAW,MAAM,IAAI;QACzB,OAAO,IAAI,OAAO,MAAM,IAAI,KAAK,UAAU;YACvC,WAAW,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAA,QAAS,MAAM,IAAI;QAC5D;QAEA,MAAM,iBAAiB;YACnB,KAAK,MAAM,GAAG;YACd,OAAO,MAAM,KAAK;YAClB,aAAa,MAAM,WAAW;YAC9B,OAAO,MAAM,KAAK;YAClB,WAAW,MAAM,GAAG;YACpB,aAAa,MAAM,OAAO;YAC1B,UAAU,MAAM,QAAQ;YACxB;YACA,QAAQ,MAAM,MAAM;YACpB,SAAS,MAAM,OAAO;YACtB,oBAAoB,MAAM,kBAAkB;YAC5C,UAAU,MAAM,QAAQ;QAC5B;QAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC,iBAAiB;YAChD,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAClD;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAAsB,OAAO,MAAM,OAAO;QAAC,IAAI;YACzF,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAClD;IACJ;AACA,wDAAwD;AAC5D","debugId":null}}]
}