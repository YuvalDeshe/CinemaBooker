{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/johnd/OneDrive/Desktop/Folders/Web%20Dev%20Stuff/CinemaBooker/cinema-booker/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nconst handler = NextAuth({\r\n  session: { strategy: \"jwt\" },\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.id = user.id;\r\n        token.isEmailVerified = (user as any).isEmailVerified;\r\n        token.userType = (user as any).userType ?? (user as any).role ?? \"USER\";\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      if (token && session.user) {\r\n        (session.user as any).id = token.id;\r\n        (session.user as any).isEmailVerified = token.isEmailVerified;\r\n        (session.user as any).userType = token.userType;\r\n      }\r\n      return session;\r\n    },\r\n  },\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"text\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        console.log(\"Validating credentials for:\", credentials?.email);\r\n\r\n        if (!credentials?.email || !credentials?.password) {\r\n          console.log(\"Missing credentials.\");\r\n          return null;\r\n        }\r\n\r\n        const { email, password } = credentials;\r\n        const trimmedEmail = email.trim();\r\n\r\n        try {\r\n          console.log(`Finding user: \"${trimmedEmail}\"`);\r\n\r\n          const apiUrl = process.env.NEXT_PUBLIC_API_DOMAIN;\r\n          const response = await fetch(`${apiUrl}/login`, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ email, password }),\r\n          });\r\n\r\n          const data = await response.json();\r\n\r\n          if (!response.ok) {\r\n            console.error(\"User not found:\", trimmedEmail);\r\n            return null;\r\n          }\r\n\r\n          const user = data.user;\r\n\r\n          if (!user || !user.password) {\r\n            console.error(`Password field missing for user ${user?.email}.`);\r\n            return null;\r\n          }\r\n\r\n          console.log(`Comparing password for ${user.email}...`);\r\n          const isPasswordCorrect = await bcrypt.compare(password, user.password);\r\n\r\n          if (!isPasswordCorrect) {\r\n            console.log(`Password incorrect for ${user.email}.`);\r\n            return null;\r\n          }\r\n\r\n          console.log(`Credentials valid for ${user.email}.`);\r\n          return {\r\n            id: user._id.toString(),\r\n            email: user.email,\r\n            username: user.username,\r\n            isEmailVerified: user.isEmailVerified ?? true,\r\n            userType: user.userType ?? user.role ?? \"USER\",\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Network or parsing error during login:\", error);\r\n          return null;\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n});\r\n\r\nexport { handler as GET, handler as POST };\r\n\r\n\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;;;;AAEA,MAAM,UAAU,IAAA,sLAAQ,EAAC;IACvB,SAAS;QAAE,UAAU;IAAM;IAC3B,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,eAAe,GAAG,AAAC,KAAa,eAAe;gBACrD,MAAM,QAAQ,GAAG,AAAC,KAAa,QAAQ,IAAI,AAAC,KAAa,IAAI,IAAI;YACnE;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACxB,QAAQ,IAAI,CAAS,EAAE,GAAG,MAAM,EAAE;gBAClC,QAAQ,IAAI,CAAS,eAAe,GAAG,MAAM,eAAe;gBAC5D,QAAQ,IAAI,CAAS,QAAQ,GAAG,MAAM,QAAQ;YACjD;YACA,OAAO;QACT;IACF;IACA,WAAW;QACT,IAAA,yMAAmB,EAAC;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,QAAQ,GAAG,CAAC,+BAA+B,aAAa;gBAExD,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,QAAQ,GAAG,CAAC;oBACZ,OAAO;gBACT;gBAEA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;gBAC5B,MAAM,eAAe,MAAM,IAAI;gBAE/B,IAAI;oBACF,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;oBAE7C,MAAM;oBACN,MAAM,WAAW,MAAM,MAAM,GAAG,OAAO,MAAM,CAAC,EAAE;wBAC9C,QAAQ;wBACR,SAAS;4BACP,gBAAgB;wBAClB;wBACA,MAAM,KAAK,SAAS,CAAC;4BAAE;4BAAO;wBAAS;oBACzC;oBAEA,MAAM,OAAO,MAAM,SAAS,IAAI;oBAEhC,IAAI,CAAC,SAAS,EAAE,EAAE;wBAChB,QAAQ,KAAK,CAAC,mBAAmB;wBACjC,OAAO;oBACT;oBAEA,MAAM,OAAO,KAAK,IAAI;oBAEtB,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;wBAC3B,QAAQ,KAAK,CAAC,CAAC,gCAAgC,EAAE,MAAM,MAAM,CAAC,CAAC;wBAC/D,OAAO;oBACT;oBAEA,QAAQ,GAAG,CAAC,CAAC,uBAAuB,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC;oBACrD,MAAM,oBAAoB,MAAM,kLAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;oBAEtE,IAAI,CAAC,mBAAmB;wBACtB,QAAQ,GAAG,CAAC,CAAC,uBAAuB,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC;wBACnD,OAAO;oBACT;oBAEA,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC;oBAClD,OAAO;wBACL,IAAI,KAAK,GAAG,CAAC,QAAQ;wBACrB,OAAO,KAAK,KAAK;wBACjB,UAAU,KAAK,QAAQ;wBACvB,iBAAiB,KAAK,eAAe,IAAI;wBACzC,UAAU,KAAK,QAAQ,IAAI,KAAK,IAAI,IAAI;oBAC1C;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,0CAA0C;oBACxD,OAAO;gBACT;YACF;QACF;KACD;AACH","debugId":null}},
    {"offset": {"line": 220, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/johnd/OneDrive/Desktop/Folders/Web%20Dev%20Stuff/CinemaBooker/cinema-booker/src/app/api/users/%5Bid%5D/route.js"],"sourcesContent":["import { MongoClient, ObjectId } from 'mongodb';\r\nimport { getServerSession } from 'next-auth';\r\nimport { authOptions } from '../../auth/[...nextauth]/route'\r\nimport bcrypt from 'bcryptjs';\r\n\r\nconst uri = process.env.MONGODB_URI;\r\nconst SALT_ROUNDS = 10;\r\n\r\nlet client;\r\nlet db;\r\n\r\nasync function connectToDatabase() {\r\n    if (db) {\r\n        return { client, db };\r\n    }\r\n\r\n    client = new MongoClient(uri);\r\n    await client.connect();\r\n    db = client.db('UserDatabase');\r\n    return { client, db };\r\n}\r\n\r\nexport async function GET(request, { params }) {\r\n    try {\r\n        const { db } = await connectToDatabase();\r\n        const usersCollection = db.collection('UserCollection');\r\n        const { id } = await params;\r\n        const user = await usersCollection.findOne({ _id: new ObjectId(id) });\r\n\r\n        if (!user) {\r\n            return new Response(JSON.stringify({ message: \"User not found\" }), {\r\n                status: 404,\r\n                headers: { 'Content-Type': 'application/json' },\r\n            });\r\n        }\r\n\r\n        const formattedUser = {\r\n            _id: user._id,\r\n            username: user.username,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            email: user.email,\r\n            password: user.password,\r\n            homeAddress: user.homeAddress,\r\n            paymentCard: user.paymentCard,\r\n            isRegisteredForPromos: user.isRegisteredForPromos,\r\n        };\r\n\r\n        return new Response(JSON.stringify(formattedUser), {\r\n            status: 200,\r\n            headers: { 'Content-Type': 'application/json' },\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Failed to fetch user:\", error);\r\n        if (error.name === 'BSONTypeError') {\r\n            return new Response(JSON.stringify({ message: \"Invalid User ID format\" }), {\r\n                status: 400,\r\n                headers: { 'Content-Type': 'application/json' },\r\n            });\r\n        }\r\n        return new Response(JSON.stringify({ message: \"An error occurred.\", error: error.message }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' },\r\n        });\r\n    }\r\n}\r\n\r\nexport async function PATCH(request, { params }) {\r\n    try {\r\n        const session = await getServerSession(authOptions);\r\n        const { id } = await params;\r\n\r\n        if (!session) {\r\n            return NextResponse.json({ error: \"Not authenticated\" }, { status: 401 });\r\n        } else if (session.user.id !== id) {\r\n            return NextResponse.json({ error: \"Forbidden\" }, { status: 403 });\r\n        }\r\n\r\n        const { db } = await connectToDatabase();\r\n        const usersCollection = db.collection('UserCollection');\r\n\r\n        if (!ObjectId.isValid(id)) {\r\n            return new Response(JSON.stringify({ message: \"Invalid User ID format\" }), {\r\n                status: 400,\r\n                headers: { 'Content-Type': 'application/json' },\r\n            });\r\n        }\r\n\r\n        const updateData = await request.json();\r\n        const updateDoc = {};\r\n        const user = await usersCollection.findOne({ email: updateData.email });\r\n\r\n        if (updateData.firstName) {\r\n            updateDoc.firstName = updateData.firstName;\r\n        }\r\n        if (updateData.lastName) {\r\n            updateDoc.lastName = updateData.lastName;\r\n        }\r\n        if (updateData.password) {\r\n            const isSamePassword = await bcrypt.compare(updateData.password, user.password);\r\n            if (!(isSamePassword || updateData.password === user.password)) {\r\n                console.log(\"PASSWORD UPDATE: Hashing new password using bcrypt.\");\r\n                const salt = await bcrypt.genSalt(10);\r\n                const hashedPassword = await bcrypt.hash(updateData.password, salt);\r\n                updateDoc.password = hashedPassword;\r\n            } else {\r\n                updateDoc.password = user.password;\r\n            }\r\n        }\r\n\r\n        if (updateData.paymentCard) {\r\n            let hashedPaymentCard = [];\r\n            if (Array.isArray(updateData.paymentCard)) {\r\n                hashedPaymentCard = await Promise.all(\r\n                    updateData.paymentCard.map(async card => {\r\n                        if (card.isNew) {\r\n                            // hash the card number before adding a new card\r\n                            const hashedNumber = await bcrypt.hash(card.cardNumber, SALT_ROUNDS);\r\n                            return {\r\n                                cardType: card.cardType,\r\n                                cardNumber: hashedNumber,\r\n                                expMonth: card.expMonth,\r\n                                expYear: card.expYear,\r\n                                lastFour: card.cardNumber.slice(-4)\r\n                            }\r\n                        } else {\r\n                            // add the card as-is without rehashing the card number if it exists in the DB\r\n                            return {\r\n                                cardType: card.cardType,\r\n                                cardNumber: card.cardNumber,\r\n                                expMonth: card.expMonth,\r\n                                expYear: card.expYear,\r\n                                lastFour: card.lastFour\r\n                            }\r\n                        }\r\n                    })\r\n                )\r\n                updateDoc.paymentCard = hashedPaymentCard;\r\n            } else {\r\n                return new Response(JSON.stringify({ message: \"paymentCard must be an array.\" }), {\r\n                    status: 400,\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                });\r\n            }\r\n        }\r\n\r\n        if (Object.keys(updateDoc).length === 0) {\r\n            return new Response(JSON.stringify({ message: \"No valid fields provided for update.\" }), {\r\n                status: 400,\r\n                headers: { 'Content-Type': 'application/json' },\r\n            });\r\n        }\r\n\r\n        const result = await usersCollection.updateOne(\r\n            { _id: new ObjectId(id) },\r\n            { $set: updateDoc }\r\n        );\r\n\r\n        if (result.matchedCount === 0) {\r\n            return new Response(JSON.stringify({ message: \"User not found.\" }), {\r\n                status: 404,\r\n                headers: { 'Content-Type': 'application/json' },\r\n            });\r\n        }\r\n\r\n        if (result.modifiedCount === 0) {\r\n            return new Response(JSON.stringify({ message: \"Update successful, but no fields were modified as the values were the same.\" }), {\r\n                status: 200,\r\n                headers: { 'Content-Type': 'application/json' },\r\n            });\r\n        }\r\n\r\n        return new Response(JSON.stringify({\r\n            message: \"User updated successfully.\",\r\n            updatedFields: Object.keys(updateDoc)\r\n        }), {\r\n            status: 200,\r\n            headers: { 'Content-Type': 'application/json' },\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Failed to update user:\", error);\r\n        return new Response(JSON.stringify({ message: \"An error occurred during update.\", error: error.message }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' },\r\n        });\r\n    }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}