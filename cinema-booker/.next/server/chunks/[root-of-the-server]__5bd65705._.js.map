{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/johnd/OneDrive/Desktop/Folders/Web%20Dev%20Stuff/CinemaBooker/cinema-booker/src/app/api/login/route.js"],"sourcesContent":["import { MongoClient } from 'mongodb';\r\nimport bcrypt from 'bcryptjs';\r\nconst uri = process.env.MONGODB_URI;\r\n\r\nlet client;\r\nlet db;\r\n\r\nasync function connectToDatabase() {\r\n    if (db) {\r\n        return { client, db };\r\n    }\r\n\r\n    client = new MongoClient(uri);\r\n    await client.connect();\r\n    db = client.db('UserDatabase');\r\n    return { client, db };\r\n}\r\n\r\nexport async function POST(request) {\r\n    try {\r\n        const { email, password } = await request.json();\r\n\r\n        if (!email || !password) {\r\n            return new Response(JSON.stringify({ message: \"Email and password are required.\" }), {\r\n                status: 400,\r\n                headers: { 'Content-Type': 'application/json' },\r\n            });\r\n        }\r\n\r\n        const { db } = await connectToDatabase();\r\n        const usersCollection = db.collection('UserCollection');\r\n\r\n        const user = await usersCollection.findOne({ email: email });\r\n\r\n        if (!user) {\r\n            return new Response(JSON.stringify({ message: \"Invalid credentials.\" }), {\r\n                status: 401,\r\n                headers: { 'Content-Type': 'application/json' },\r\n            });\r\n        }\r\n\r\n        const isPasswordValid = await bcrypt.compare(password, user.password);\r\n\r\n        if (!isPasswordValid) {\r\n            return new Response(JSON.stringify({ message: \"Invalid credentials.\" }), {\r\n                status: 401,\r\n                headers: { 'Content-Type': 'application/json' },\r\n            });\r\n        }\r\n\r\n        // Check if email is verified (for new users who registered after implementing email verification)\r\n        if (user.hasOwnProperty('isEmailVerified') && !user.isEmailVerified) {\r\n            return new Response(JSON.stringify({ \r\n                message: \"Please verify your email address before logging in. Check your email for a verification link.\",\r\n                requiresVerification: true\r\n            }), {\r\n                status: 403,\r\n                headers: { 'Content-Type': 'application/json' },\r\n            });\r\n        }\r\n\r\n        const responseData = {\r\n            _id: user._id,\r\n            username: user.username,\r\n            password: user.password,\r\n            firstName: user.firstName,\r\n            lastName: user.lastName,\r\n            email: user.email,\r\n            isRegisteredForPromos: user.isRegisteredForPromos,\r\n            userType: user.userType,\r\n            userStatus: user.userStatus,\r\n            isEmailVerified: user.isEmailVerified || true, // Default to true for existing users\r\n        };\r\n\r\n        return new Response(JSON.stringify({\r\n            message: \"Login successful.\",\r\n            user: responseData\r\n        }), {\r\n            status: 200,\r\n            headers: { 'Content-Type': 'application/json' },\r\n        });\r\n\r\n    } catch (error) {\r\n        console.error(\"Login failed:\", error);\r\n        return new Response(JSON.stringify({ message: \"An internal server error occurred.\", error: error.message }), {\r\n            status: 500,\r\n            headers: { 'Content-Type': 'application/json' },\r\n        });\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AACA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW;AAEnC,IAAI;AACJ,IAAI;AAEJ,eAAe;IACX,IAAI,IAAI;QACJ,OAAO;YAAE;YAAQ;QAAG;IACxB;IAEA,SAAS,IAAI,sHAAW,CAAC;IACzB,MAAM,OAAO,OAAO;IACpB,KAAK,OAAO,EAAE,CAAC;IACf,OAAO;QAAE;QAAQ;IAAG;AACxB;AAEO,eAAe,KAAK,OAAO;IAC9B,IAAI;QACA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAE9C,IAAI,CAAC,SAAS,CAAC,UAAU;YACrB,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,SAAS;YAAmC,IAAI;gBACjF,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAClD;QACJ;QAEA,MAAM,EAAE,EAAE,EAAE,GAAG,MAAM;QACrB,MAAM,kBAAkB,GAAG,UAAU,CAAC;QAEtC,MAAM,OAAO,MAAM,gBAAgB,OAAO,CAAC;YAAE,OAAO;QAAM;QAE1D,IAAI,CAAC,MAAM;YACP,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,SAAS;YAAuB,IAAI;gBACrE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAClD;QACJ;QAEA,MAAM,kBAAkB,MAAM,kLAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;QAEpE,IAAI,CAAC,iBAAiB;YAClB,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,SAAS;YAAuB,IAAI;gBACrE,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAClD;QACJ;QAEA,kGAAkG;QAClG,IAAI,KAAK,cAAc,CAAC,sBAAsB,CAAC,KAAK,eAAe,EAAE;YACjE,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAC/B,SAAS;gBACT,sBAAsB;YAC1B,IAAI;gBACA,QAAQ;gBACR,SAAS;oBAAE,gBAAgB;gBAAmB;YAClD;QACJ;QAEA,MAAM,eAAe;YACjB,KAAK,KAAK,GAAG;YACb,UAAU,KAAK,QAAQ;YACvB,UAAU,KAAK,QAAQ;YACvB,WAAW,KAAK,SAAS;YACzB,UAAU,KAAK,QAAQ;YACvB,OAAO,KAAK,KAAK;YACjB,uBAAuB,KAAK,qBAAqB;YACjD,UAAU,KAAK,QAAQ;YACvB,YAAY,KAAK,UAAU;YAC3B,iBAAiB,KAAK,eAAe,IAAI;QAC7C;QAEA,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAC/B,SAAS;YACT,MAAM;QACV,IAAI;YACA,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAClD;IAEJ,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,SAAS;YAAsC,OAAO,MAAM,OAAO;QAAC,IAAI;YACzG,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;QAClD;IACJ;AACJ","debugId":null}}]
}