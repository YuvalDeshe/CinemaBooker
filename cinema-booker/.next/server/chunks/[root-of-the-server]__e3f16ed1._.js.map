{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/johnd/OneDrive/Desktop/Folders/Web%20Dev%20Stuff/CinemaBooker/cinema-booker/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nconst handler = NextAuth({\r\n  session: { strategy: \"jwt\" },\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        token.id = user.id;\r\n        token.isEmailVerified = (user as any).isEmailVerified;\r\n        token.userType = (user as any).userType ?? (user as any).role ?? \"USER\";\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      if (token && session.user) {\r\n        (session.user as any).id = token.id;\r\n        (session.user as any).isEmailVerified = token.isEmailVerified;\r\n        (session.user as any).userType = token.userType;\r\n      }\r\n      return session;\r\n    },\r\n  },\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"text\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        console.log(\"Validating credentials for:\", credentials?.email);\r\n\r\n        if (!credentials?.email || !credentials?.password) {\r\n          console.log(\"Missing credentials.\");\r\n          return null;\r\n        }\r\n\r\n        const { email, password } = credentials;\r\n        const trimmedEmail = email.trim();\r\n\r\n        try {\r\n          console.log(`Finding user: \"${trimmedEmail}\"`);\r\n\r\n          const apiUrl = process.env.NEXT_PUBLIC_API_DOMAIN;\r\n          const response = await fetch(`${apiUrl}/login`, {\r\n            method: \"POST\",\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({ email, password }),\r\n          });\r\n\r\n          const data = await response.json();\r\n\r\n          if (!response.ok) {\r\n            console.error(\"User not found:\", trimmedEmail);\r\n            return null;\r\n          }\r\n\r\n          const user = data.user;\r\n\r\n          if (!user || !user.password) {\r\n            console.error(`Password field missing for user ${user?.email}.`);\r\n            return null;\r\n          }\r\n\r\n          console.log(`Comparing password for ${user.email}...`);\r\n          const isPasswordCorrect = await bcrypt.compare(password, user.password);\r\n\r\n          if (!isPasswordCorrect) {\r\n            console.log(`Password incorrect for ${user.email}.`);\r\n            return null;\r\n          }\r\n\r\n          console.log(`Credentials valid for ${user.email}.`);\r\n          return {\r\n            id: user._id.toString(),\r\n            email: user.email,\r\n            username: user.username,\r\n            isEmailVerified: user.isEmailVerified ?? true,\r\n            userType: user.userType ?? user.role ?? \"USER\",\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Network or parsing error during login:\", error);\r\n          return null;\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n});\r\n\r\nexport { handler as GET, handler as POST };\r\n\r\n\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;AACA;;;;AAEA,MAAM,UAAU,IAAA,sLAAQ,EAAC;IACvB,SAAS;QAAE,UAAU;IAAM;IAC3B,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,eAAe,GAAG,AAAC,KAAa,eAAe;gBACrD,MAAM,QAAQ,GAAG,AAAC,KAAa,QAAQ,IAAI,AAAC,KAAa,IAAI,IAAI;YACnE;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,SAAS,QAAQ,IAAI,EAAE;gBACxB,QAAQ,IAAI,CAAS,EAAE,GAAG,MAAM,EAAE;gBAClC,QAAQ,IAAI,CAAS,eAAe,GAAG,MAAM,eAAe;gBAC5D,QAAQ,IAAI,CAAS,QAAQ,GAAG,MAAM,QAAQ;YACjD;YACA,OAAO;QACT;IACF;IACA,WAAW;QACT,IAAA,yMAAmB,EAAC;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,QAAQ,GAAG,CAAC,+BAA+B,aAAa;gBAExD,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,QAAQ,GAAG,CAAC;oBACZ,OAAO;gBACT;gBAEA,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG;gBAC5B,MAAM,eAAe,MAAM,IAAI;gBAE/B,IAAI;oBACF,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,aAAa,CAAC,CAAC;oBAE7C,MAAM;oBACN,MAAM,WAAW,MAAM,MAAM,GAAG,OAAO,MAAM,CAAC,EAAE;wBAC9C,QAAQ;wBACR,SAAS;4BACP,gBAAgB;wBAClB;wBACA,MAAM,KAAK,SAAS,CAAC;4BAAE;4BAAO;wBAAS;oBACzC;oBAEA,MAAM,OAAO,MAAM,SAAS,IAAI;oBAEhC,IAAI,CAAC,SAAS,EAAE,EAAE;wBAChB,QAAQ,KAAK,CAAC,mBAAmB;wBACjC,OAAO;oBACT;oBAEA,MAAM,OAAO,KAAK,IAAI;oBAEtB,IAAI,CAAC,QAAQ,CAAC,KAAK,QAAQ,EAAE;wBAC3B,QAAQ,KAAK,CAAC,CAAC,gCAAgC,EAAE,MAAM,MAAM,CAAC,CAAC;wBAC/D,OAAO;oBACT;oBAEA,QAAQ,GAAG,CAAC,CAAC,uBAAuB,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC;oBACrD,MAAM,oBAAoB,MAAM,kLAAM,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ;oBAEtE,IAAI,CAAC,mBAAmB;wBACtB,QAAQ,GAAG,CAAC,CAAC,uBAAuB,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC;wBACnD,OAAO;oBACT;oBAEA,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC;oBAClD,OAAO;wBACL,IAAI,KAAK,GAAG,CAAC,QAAQ;wBACrB,OAAO,KAAK,KAAK;wBACjB,UAAU,KAAK,QAAQ;wBACvB,iBAAiB,KAAK,eAAe,IAAI;wBACzC,UAAU,KAAK,QAAQ,IAAI,KAAK,IAAI,IAAI;oBAC1C;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,0CAA0C;oBACxD,OAAO;gBACT;YACF;QACF;KACD;AACH","debugId":null}}]
}